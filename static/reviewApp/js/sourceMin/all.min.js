angular.module("MassAutoComplete",[]).directive("massAutocomplete",["$timeout","$window","$document","$q",function($timeout,$window,$document,$q){"use strict";return{restrict:"A",scope:{options:"&massAutocomplete"},transclude:!0,template:'<span ng-transclude></span><div class="suggestion-menu-position ac-container" ng-show="show_autocomplete && results.length > 0"><ul class="ac-menu"><li ng-repeat="result in results" ng-if="$index > 0" class="ac-menu-item suggestion-item-top" ng-class="$index == selected_index ? \'ac-state-focus\': \'\'"><span ng-click="apply_selection($index)"><a href  class="suggestion-name-position" ng-bind-html="result.name"></a><a href class="suggestion-type-position" ng-bind-html="result.type"></a></span></li></ul></div>',link:function(scope,element){scope.container=angular.element(element[0].getElementsByClassName("ac-container")[0])},controller:["$scope","$rootScope",function($scope,$rootScope){function debounce(func,wait,immediate){var timeout;return function(){var context=this,args=arguments,later=function(){timeout=null,immediate||func.apply(context,args)},callNow=immediate&&!timeout;clearTimeout(timeout),timeout=setTimeout(later,wait),callNow&&func.apply(context,args)}}function _position_autocomplete(){var rect=current_element[0].getBoundingClientRect(),scrollTop=$document[0].body.scrollTop||$document[0].documentElement.scrollTop||$window.pageYOffset,scrollLeft=$document[0].body.scrollLeft||$document[0].documentElement.scrollLeft||$window.pageXOffset,container=$scope.container[0];container.style.top=rect.top+rect.height+scrollTop+"px",container.style.left=rect.left+scrollLeft+"px",container.style.width=rect.width+"px"}function _attach(ngmodel,target_element,options){current_element!==target_element&&(current_element&&that.detach(),target_element[0]===$document[0].activeElement&&(options.on_attach&&options.on_attach(),current_element=target_element,current_model=ngmodel,current_options=options,previous_value=ngmodel.$viewValue,$scope.results=[],$scope.selected_index=-1,bind_element(),value_watch=$scope.$watch(function(){return ngmodel.$modelValue},function(nv,ov){nv!==last_selected_value&&(_position_autocomplete(),suggest(nv,current_element))})))}function _suggest(term,target_element){$scope.selected_index=0,$scope.waiting_for_suggestion=!0,"string"==typeof term&&term.length>0?$q.when(current_options.suggest(term),function(suggestions){current_element&&current_element===target_element&&(suggestions&&suggestions.length>0?($scope.results=[{name:term}].concat(suggestions),$scope.show_autocomplete=!0,current_options.auto_select_first&&set_selection(1)):$scope.results=[])},function(error){$scope.show_autocomplete=!1,current_options.on_error&&current_options.on_error(error)})["finally"](function(){$scope.waiting_for_suggestion=!1}):($scope.waiting_for_suggestion=!1,$scope.show_autocomplete=!1,$scope.$apply())}function update_model_value(value){current_model.$modelValue!==value&&(current_model.$setViewValue(value),current_model.$render())}function set_selection(i){var selected=$scope.results[i];return current_element.val(selected.name),$scope.selected_index=i,selected}function bind_element(){angular.element($window).bind(EVENTS.RESIZE,position_autocomplete),bound_events[EVENTS.BLUR]=function(){$timeout(function(){current_element&&current_element[0]===$document[0].activeElement||that.detach()},user_options.debounce_blur)},current_element.bind(EVENTS.BLUR,bound_events[EVENTS.BLUR]),bound_events[EVENTS.KEYDOWN]=function(e){if(!e.shiftKey)switch(e.keyCode){case KEYS.ESC:$scope.show_autocomplete?($scope.show_autocomplete=!1,$scope.$apply()):current_element.val(previous_value);break;case KEYS.ENTER:$scope.show_autocomplete&&$scope.selected_index>0&&!$scope.waiting_for_suggestion&&($scope.apply_selection($scope.selected_index),e.stopPropagation(),e.preventDefault()),$scope.show_autocomplete=!1,$scope.$apply();break;case KEYS.TAB:if(!$scope.show_autocomplete)break;e.preventDefault();case KEYS.DOWN:$scope.results.length>0&&($scope.show_autocomplete?(console.log("selected index: ",$scope.selected_index),set_selection($scope.selected_index+1>$scope.results.length-1?0:$scope.selected_index+1)):($scope.show_autocomplete=!0,$scope.selected_index=0),$scope.$apply());break;case KEYS.UP:$scope.show_autocomplete&&(e.preventDefault(),set_selection($scope.selected_index-1>=0?$scope.selected_index-1:$scope.results.length-1),$scope.$apply())}},current_element.bind(EVENTS.KEYDOWN,bound_events[EVENTS.KEYDOWN])}var that=this,KEYS={TAB:9,ESC:27,ENTER:13,UP:38,DOWN:40},EVENTS={KEYDOWN:"keydown",RESIZE:"resize",BLUR:"blur"},bound_events={};bound_events[EVENTS.BLUR]=null,bound_events[EVENTS.KEYDOWN]=null,bound_events[EVENTS.RESIZE]=null;var current_element,current_model,current_options,previous_value,value_watch,last_selected_value,_user_options=$scope.options()||{},user_options={debounce_position:_user_options.debounce_position||150,debounce_attach:_user_options.debounce_attach||300,debounce_suggest:_user_options.debounce_suggest||200,debounce_blur:_user_options.debounce_blur||150};$scope.show_autocomplete=!1;var position_autocomplete=debounce(_position_autocomplete,user_options.debounce_position);that.attach=debounce(_attach,user_options.debounce_attach);var suggest=debounce(_suggest,user_options.debounce_suggest);that.detach=function(){if(current_element){var value=current_element.val();update_model_value(value),current_options.on_detach&&current_options.on_detach(value),current_element.unbind(EVENTS.KEYDOWN,bound_events[EVENTS.KEYDOWN]),current_element.unbind(EVENTS.BLUR,bound_events[EVENTS.BLUR])}$scope.show_autocomplete=!1,angular.element($window).unbind(EVENTS.RESIZE,bound_events[EVENTS.RESIZE]),value_watch&&value_watch(),$scope.selected_index=$scope.results=void 0,current_model=current_element=previous_value=void 0},$scope.apply_selection=function(i){if(current_element[0].focus(),!(!$scope.show_autocomplete||i>$scope.results.length||0>i)){$rootScope.setSelectedRecordData($scope.results[i]);var selected=set_selection(i);last_selected_value=selected.name,update_model_value(selected.name),$scope.show_autocomplete=!1,current_options.on_select&&current_options.on_select(selected)}},$scope.$on("$destroy",function(){that.detach(),$scope.container.remove()})}]}}]).directive("massAutocompleteItem",function(){"use strict";return{restrict:"A",require:["^massAutocomplete","ngModel"],scope:{massAutocompleteItem:"&"},link:function(scope,element,attrs,required){attrs.$set("autocomplete","off"),element.bind("focus",function(){var options=scope.massAutocompleteItem();if(!options)throw"Invalid options";required[0].attach(required[1],element,options)})}}});var searchReviewApp=angular.module("mainCollegeApp.searchReview",["MassAutoComplete"]);searchReviewApp.controller("searchReviewCtrl",function($scope,$rootScope,HTTPService,utilityService,$location){function suggest_state(term){for(var q=term.toLowerCase().trim(),results=[],i=0;i<$scope.acadamies.length&&results.length<10;i++){var acadamy=$scope.acadamies[i];0===acadamy.name.toLowerCase().indexOf(q)&&results.push(acadamy)}return console.log(results),results}$scope.searchQuery="",$scope.selectedRecord="",$scope.acadamies="",$scope.autocomplete_options={suggest:suggest_state},$rootScope.setSelectedRecordData=function(selectedItem){$scope.selectedRecord=selectedItem},$scope.getRecords=function(searchQuery){if(""!=searchQuery){var formData=utilityService.objectToRequestData({name_prefix:searchQuery});HTTPService.POSTRequest("/review/search/",formData,"getAllAcademyDetails")}},$scope.goToAcadamyPage=function(selectedRecord){console.log("selected record: ",selectedRecord),$location.path("/review/"+selectedRecord.type+"/"+selectedRecord.id)},$scope.$on("getAllAcademyDetailsSuccess",function(event,response){console.log("Response: ",response.data.data.academies),$scope.acadamies=response.data.data.academies}),$scope.$on("getAllAcademyDetailsError",function(event,response){})});var collegeReviewApp=angular.module("mainCollegeApp.collegeReview",[]);collegeReviewApp.controller("collegeReviewCtrl",function($scope,HTTPService,utilityService,$stateParams){$scope.collegeID=$stateParams.acadamyID,$scope.collegeJSONData={user_id:"",college_id:"",college_name:"",state_name:"",course:"",entrance:"",rank:"",pass_out_year:"",fee:"",review:"",accommodation:0,infrastructure:0,faculties:0,placement:0,social_life:0},HTTPService.GETRequest("/college/"+$scope.collegeID+"/","","getCollegeRecord"),$scope.submitCollegeReview=function(collegeJSONData){var formData=utilityService.objectToRequestData({jsonData:encodeURIComponent(JSON.stringify(collegeJSONData))});HTTPService.POSTRequest("/review/college/",formData,"collegeReview")},$scope.$on("collegeReviewSuccess",function(event,response){console.log("Response: ",response)}),$scope.$on("collegeReviewError",function(event,response){}),$scope.$on("getCollegeRecordSuccess",function(event,response){console.log("Respons: ",response)}),$scope.$on("getCollegeRecordError",function(event,response){})});var schoolReviewApp=angular.module("mainCollegeApp.schoolReview",[]);schoolReviewApp.controller("schoolReviewCtrl",function($scope,HTTPService,utilityService,$stateParams){console.log("Acadamy id: ",$stateParams.acadamyID),$scope.schoolID=$stateParams.acadamyID,$scope.schoolJSONData={user_id:"",school_id:"",school_name:"",state_name:"","class":"",stream:"",board:"",year:"",fee:"",review:"",faculties:0,infrastructure:0,facilities:0,extra_curriculum:0,social_life:0},HTTPService.GETRequest("/school/"+$scope.schoolID+"/","","getSchoolRecord"),$scope.submitSchoolReview=function(schoolJSONData){var formData=utilityService.objectToRequestData({jsonData:encodeURIComponent(JSON.stringify(schoolJSONData))});HTTPService.POSTRequest("/review/school/",formData,"schoolReview")},$scope.$on("schoolReviewSuccess",function(event,response){console.log("Response: ",response)}),$scope.$on("schoolReviewError",function(event,response){}),$scope.$on("getSchoolRecordSuccess",function(event,response){console.log("Respons: ",response)}),$scope.$on("getSchoolRecordError",function(event,response){})});var instituteReviewApp=angular.module("mainCollegeApp.instituteReview",[]);instituteReviewApp.controller("instituteReviewCtrl",function($scope,HTTPService,utilityService,$stateParams){$scope.coachingID=$stateParams.acadamyID,$scope.coachingJSONData={user_id:"",institute_id:"",institute_name:"",state_name:"",course:"",year_of_batch:"",fee:"",review:"",faculties:0,administration:0,alumni:0,atmosphere:0},HTTPService.GETRequest("/coaching/"+$scope.coachingID+"/","","getCoachingRecord"),$scope.submitCoachingReview=function(coachingJSONData){var formData=utilityService.objectToRequestData({jsonData:encodeURIComponent(JSON.stringify(coachingJSONData))});HTTPService.POSTRequest("/review/coaching/",formData,"coachingReview")},$scope.$on("coachingReviewSuccess",function(event,response){console.log("Response: ",response)}),$scope.$on("coachingReviewError",function(event,response){}),$scope.$on("getCoachingRecordSuccess",function(event,response){console.log("Respons: ",response)}),$scope.$on("getCoachingRecordError",function(event,response){})});